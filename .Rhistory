upset_query(set='Wetland', fill='cornflowerblue')),
matrix=intersection_matrix(geom=geom_point(shape='circle filled', size=3.5, stroke=0.45)
)))
(plot <- plot_grid(pcoa_tech, upsetobject, nrow = 1, labels = c('A','B'), rel_widths = c(1, 1.5)))
#stats
disp.soils <- betadisper(as.dist(otu.dist.tech.b), tech.m$Site)
permutest(disp.soils, permutations=1000, pairwise = T) #significant - proceed with caution
disp.pH <- betadisper(as.dist(otu.dist.tech.b), as.factor(tech.m$pH))
permutest(disp.pH, permutations=1000, pairwise = T) #not sig, can proceed
#permanova
(pmanova.allsoils = adonis2(as.dist(otu.dist.tech.b) ~ Site+as.factor(pH), data = tech.m))
(pairwise.site<-pairwise.adonis(otu.dist.tech.b, tech.m[,"Site"])) #all sites significantly diff from each other
library(tidyverse)
library(broom)
library(seqinr)
setwd('~/Documents/CA/UC_Davis/Emerson_Lab/21.pH/220415_pHdataall/2305_proteins/')
otu <- read.table('2309.paladin.surfaceproteinsfinal.mean.tsv', sep = "\t", header=T) %>% column_to_rownames(var='Contig')
otu2 <- otu %>% filter(rowSums(. != 0) > 0)
otu <- t(otu2)
otu.xform <- decostand(otu, method="hellinger")
otu.dist.all <- as.matrix(vegdist(otu.xform, method='bray'))
str(otu.dist.all)
otu.nmds <- metaMDS(otu.dist.all)
otu.nmds$stress
pcoa <- pcoa(as.dist(otu.dist.all))
axes.mappedreads <- as.data.frame(pcoa$vectors)
axes.mappedreads
eigval <- round(pcoa$values$Relative_eig * 100, digits = 2)
eigval <- data.frame( PC = 1:length(eigval), Eigval = eigval)
eigval[[1,2]] # see first axes percentage
eigval[[2,2]] # second axes
eigval[[3,2]] # third axes
eigval[[4,2]] # fourth axes
#define the axes for the plot - adjust if plotting dimensions other than 1 and 2
pco1 <- paste("PCo1 (", eigval[[1,2]], " %)", sep = "")
pco2 <- paste("PCo2 (", eigval[[2,2]], " %)", sep = "")
pco3 <- paste("PCo3 (", eigval[[3,2]], " %)", sep = "")
axes.mappedreads$pH <- substr(rownames(axes.mappedreads), 8, 8)
axes.mappedreads$Rep <- substr(rownames(axes.mappedreads), 6, 6)
axes.mappedreads$Soil <- substr(rownames(axes.mappedreads), 1, 2)
axes.mappedreads$Soil <- factor(axes.mappedreads$Soil, levels=c("AN", "ML", "BB"))
pcoa.all <-  ggplot(mapping = aes(x, y)) +
geom_point(data=axes.mappedreads, aes(x=Axis.1, y=Axis.2, fill=Soil), pch = 21, size=5, col = 'black') +
scale_fill_manual(values=c('darkslateblue','burlywood1','cornflowerblue'), labels = c('Forest','Grassland','Wetland'))+
labs(title = "Surface proteins: all soils", x= pco1, y=pco2) +
theme_linedraw(base_size = 16) +
theme(
legend.text = element_text(size = 8),
legend.title = element_text(size = 8),
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 10, face="bold"),
axis.title.x = element_text(size = 9, face ="bold"),
axis.title.y = element_text(size = 9, face = "bold"),
panel.grid.major = element_line(color = "gray80"),
panel.grid.minor = element_line(color = "gray80"))
pcoa.all
#stats
#check assumptions!! https://microbiome.github.io/tutorials/PERMANOVA.html
meta.all <- axes.mappedreads %>% rownames_to_column(var = 'Sample') %>% select(Sample, pH, Rep, Soil)
disp.soils <- betadisper(as.dist(otu.dist.all), meta.all$Soil)
permutest(disp.soils, permutations=1000, pairwise = T) #significant - proceed with caution
disp.pH <- betadisper(as.dist(otu.dist.all), as.factor(meta.all$pH))
permutest(disp.pH, permutations=1000, pairwise = T) #not sig, can proceed
#permanova
(pmanova.allsoils = adonis2(as.dist(otu.dist.all) ~ Soil+as.factor(pH), data = meta.all))
(pairwise.site<-pairwise.adonis(otu.dist.all, meta.all[,"Soil"])) #all sites significantly diff from each other
#generate dist matrices for stats
#forest
otu.a <- read.table('2309.paladin.surfaceproteinsfinal.mean.tsv', sep = "\t", header=T) %>% column_to_rownames(var='Contig') %>% select(starts_with('AN'))
otu.a.2 <- otu.a %>% filter(rowSums(. != 0) > 0)
otu <- t(otu.a.2)
otu.xform <- decostand(otu, method="hellinger")
otu.dist.a <- as.matrix(vegdist(otu.xform, method='bray'))
otu.nmds <- metaMDS(otu.dist.a)
pcoa <- pcoa(as.dist(otu.dist.a))
axes.a <- as.data.frame(pcoa$vectors)
axes.a$pH <- substr(rownames(axes.a), 8, 8)
axes.a$Rep <- substr(rownames(axes.a), 6, 6)
axes.a$Soil <- substr(rownames(axes.a), 1, 2)
#wetland
otu.b <- read.table('2309.paladin.surfaceproteinsfinal.mean.tsv', sep = "\t", header=T) %>% column_to_rownames(var='Contig') %>% select(starts_with('BB'))
otu.b.2 <- otu.b %>% filter(rowSums(. != 0) > 0)
otu <- t(otu.b.2)
otu.xform <- decostand(otu, method="hellinger")
otu.dist.b <- as.matrix(vegdist(otu.xform, method='bray'))
otu.nmds <- metaMDS(otu.dist.b)
pcoa <- pcoa(as.dist(otu.dist.b))
axes.b <- as.data.frame(pcoa$vectors)
axes.b$pH <- substr(rownames(axes.b), 8, 8)
axes.b$Rep <- substr(rownames(axes.b), 6, 6)
axes.b$Soil <- substr(rownames(axes.b), 1, 2)
#grassland
otu.m <- read.table('2309.paladin.surfaceproteinsfinal.mean.tsv', sep = "\t", header=T) %>% column_to_rownames(var='Contig') %>% select(starts_with('ML'))
otu.m.2 <- otu.m %>% filter(rowSums(. != 0) > 0)
otu <- t(otu.m.2)
otu.xform <- decostand(otu, method="hellinger")
otu.dist.m <- as.matrix(vegdist(otu.xform, method='bray'))
otu.nmds <- metaMDS(otu.dist.m)
pcoa <- pcoa(as.dist(otu.dist.m))
axes.m <- as.data.frame(pcoa$vectors)
axes.m$pH <- substr(rownames(axes.m), 8, 8)
axes.m$Rep <- substr(rownames(axes.m), 6, 6)
axes.m$Soil <- substr(rownames(axes.m), 1, 2)
#now actualy do the stats
#FOREST
AN.bio.m <- axes.a %>% rownames_to_column(var = 'Sample') %>% select(Sample, pH, Rep, Soil)
#check assumptions of dispersion
disp.forest.pH <- betadisper(as.dist(otu.dist.a), as.factor(AN.bio.m$pH))
permutest(disp.forest.pH, permutations=1000, pairwise = T) #not sig, can proceed
#permanova
(pmanova.forest.proteins = adonis2(as.dist(otu.dist.a) ~ as.factor(pH), data = AN.bio.m)) #not significant
###
#Grassland
ML.bio.m <- axes.m %>% rownames_to_column(var = 'Sample') %>% select(Sample, pH, Rep, Soil)
#check assumptions of dispersion
disp.grassland.pH <- betadisper(as.dist(otu.dist.m), as.factor(ML.bio.m$pH))
permutest(disp.grassland.pH, permutations=1000, pairwise = T) #not sig, can proceed
#permanova
(pmanova.grassland.proteins = adonis2(as.dist(otu.dist.m) ~ as.factor(pH), data = ML.bio.m)) #not significant
###
#Wetland
BB.bio.m <- axes.b %>% rownames_to_column(var = 'Sample') %>% select(Sample, pH, Rep, Soil)
#check assumptions of dispersion
disp.wetland.pH <- betadisper(as.dist(otu.dist.b), as.factor(BB.bio.m$pH))
permutest(disp.wetland.pH, permutations=1000, pairwise = T) #not sig, can proceed
#permanova
(pmanova.wetland.proteins = adonis2(as.dist(otu.dist.b) ~ as.factor(pH), data = BB.bio.m)) #not significant
otu.ml <- read.table('2309.paladin.surfaceproteinsfinal.mean.tsv', sep = "\t", header=T) %>% column_to_rownames(var='Contig') %>% select(starts_with('ML'))
otu.m.2 <- otu.ml %>% filter(rowSums(. != 0) > 0)
otu.m <- t(otu.m.2)
otu.xform.m <- decostand(otu.m, method = 'hellinger')
otu.dist.m <- as.matrix(vegdist(otu.xform.m, method = 'bray'))
bray.dist.m <- otu.dist.m%>%
as.data.frame() %>%
mutate(SampleID.x = row.names(.)) %>%
gather(key = "SampleID.y", value = "BrayDistance", - SampleID.x) %>%  filter(BrayDistance >0)
map <- data.frame(Sample = colnames(otu.ml))
map$x <- c(4.5, 5.5, 6.5, 7.5, 4.5, 5.5, 6.5, 7.5, 4.5, 5.5, 6.5, 7.5)
map$y <- c(0,0,0,0,0,0,0,0,0,0,0,0)
map <- map %>% column_to_rownames(var = "Sample")
abs_distance_matrix_m <- as.matrix(vegdist(map, method = "manhattan"))
distance.tidy.m <- abs_distance_matrix_m %>% as.data.frame() %>%
mutate(SampleID.x = row.names(.)) %>%
gather(key = "SampleID.y", value = "SpatialDistance", -SampleID.x)
combined.m <- bray.dist.m %>%
inner_join(distance.tidy.m, by = c("SampleID.x", "SampleID.y")) %>% mutate(Site = 'Grassland')
otu.an <- read.table('2309.paladin.surfaceproteinsfinal.mean.tsv', sep = "\t", header=T) %>% column_to_rownames(var='Contig') %>% select(starts_with('AN'))
otu.a.2 <- otu.an %>% filter(rowSums(. != 0) > 0)
otu.a <- t(otu.a.2)
otu.xform.a <- decostand(otu.a, method = 'hellinger')
otu.dist.a <- as.matrix(vegdist(otu.xform.a, method = 'bray'))
bray.dist.a <- otu.dist.a%>%
as.data.frame() %>%
mutate(SampleID.x = row.names(.)) %>%
gather(key = "SampleID.y", value = "BrayDistance", - SampleID.x) %>%  filter(BrayDistance >0)
map.a <- data.frame(Sample = colnames(otu.an))
map.a$x <- c(4.5, 5.5, 6.5, 7.5, 4.5, 5.5, 6.5, 7.5, 4.5, 5.5, 6.5, 7.5)
map.a$y <- c(0,0,0,0,0,0,0,0,0,0,0,0)
map.a <- map.a %>% column_to_rownames(var = "Sample")
abs_distance_matrix_a <- as.matrix(vegdist(map.a, method = "manhattan"))
distance.tidy.a <- abs_distance_matrix_a %>% as.data.frame() %>%
mutate(SampleID.x = row.names(.)) %>%
gather(key = "SampleID.y", value = "SpatialDistance", -SampleID.x)
combined.a <- bray.dist.a %>%
inner_join(distance.tidy.a, by = c("SampleID.x", "SampleID.y")) %>% mutate(Site = 'Forest')
otu.bb <- read.table('2309.paladin.surfaceproteinsfinal.mean.tsv', sep = "\t", header=T) %>% column_to_rownames(var='Contig') %>% select(starts_with('BB'))
otu.b.2 <- otu.bb %>% filter(rowSums(. != 0) > 0)
otu.b <- t(otu.b.2)
otu.xform.b <- decostand(otu.b, method = 'hellinger')
otu.dist.b <- as.matrix(vegdist(otu.xform.b, method = 'bray'))
bray.dist.b <- otu.dist.b%>%
as.data.frame() %>%
mutate(SampleID.x = row.names(.)) %>%
gather(key = "SampleID.y", value = "BrayDistance", - SampleID.x) %>%  filter(BrayDistance >0)
map.b <- data.frame(Sample = colnames(otu.bb))
map.b$x <- c(4.5, 5.5, 6.5, 7.5, 4.5, 5.5, 6.5, 7.5, 4.5, 5.5, 6.5, 7.5)
map.b$y <- c(0,0,0,0,0,0,0,0,0,0,0,0)
map.b <- map.b %>% column_to_rownames(var = "Sample")
abs_distance_matrix_b <- as.matrix(vegdist(map.b, method = "manhattan"))
distance.tidy.b <- abs_distance_matrix_b %>% as.data.frame() %>%
mutate(SampleID.x = row.names(.)) %>%
gather(key = "SampleID.y", value = "SpatialDistance", -SampleID.x)
combined.b <- bray.dist.b %>%
inner_join(distance.tidy.b, by = c("SampleID.x", "SampleID.y")) %>% mutate(Site = 'Wetland')
combined4plots <- rbind(combined.a, combined.b, combined.m)
combined4plots$Site <- factor(combined4plots$Site, levels=c("Forest", "Grassland", "Wetland"))
(bc.plots <- ggplot(combined4plots, aes(SpatialDistance, BrayDistance, fill = Site))+
geom_smooth(data = subset(combined4plots, Site == "Grassland"), method = "lm", se = FALSE, formula = y ~ x, color = 'burlywood1', show.legend = FALSE) +
geom_smooth(data = subset(combined4plots, Site == "Wetland"), method = "lm", se = FALSE, formula = y ~ x, color = 'cornflowerblue', show.legend = FALSE) +
geom_smooth(data = subset(combined4plots, Site == "Forest"), method = "lm", se = FALSE, formula = y ~ x, color = 'darkslateblue', show.legend = FALSE) +
stat_regline_equation(label.y = c(0.07, 0.067, 0.065), label.x = 0, aes(label = ..eq.label..), formula = y ~ x, size = 3) +
stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "*`,`~")),
label.y = 0.06, label.x = 0, size = 3) +
geom_point(col = 'black', pch = 21, show.legend = FALSE) + scale_y_continuous(expand=expansion(mult=c(0.05,0.15))) +
scale_fill_manual(values = c('darkslateblue', 'burlywood1', 'cornflowerblue')) + theme_linedraw() + facet_wrap(~Site, scales = "free_y") + labs(y = 'Viral surface protein compositional dissimilarity \n(Bray-Curtis)', x = 'Distance between buffer pHs') +
theme(axis.title.x = element_text(face ="bold"),
axis.title.y = element_text(face = "bold"),panel.grid.major = element_line(color = "gray80"),
panel.grid.minor = element_line(color = "gray80")))
#calculate the correlation and pvals!
cor_stats_calc <- function(soil.type, set2) {
dist.cor <- filter(all.dist.tidy, Soil2.x == soil.type & Set2 == set2)
cor <- cor.test(dist.cor$TemporalDifference, dist.cor$Similarity, method = "pearson", alternative = "two.sided") %>% tidy()
lm <- lm(Similarity ~ TemporalDifference, data = dist.cor) %>% tidy() %>% filter(term == "TemporalDifference")
dist.stats <- data.frame(r = cor$estimate,
slope = lm$estimate,
p.value = cor$p.value,
Soil2.x = soil.type,
Set2 = set2)
dist.stats
}
cor.m <- cor.test(combined.m$SpatialDistance, combined.m$BrayDistance, method = "pearson", alternative = "two.sided") %>% tidy()
lm.m <- lm(BrayDistance ~ SpatialDistance, data = combined.m) %>% tidy() %>% filter(term == "SpatialDistance")
dist.stats.m <- data.frame(r = cor.m$estimate,
slope = lm.m$estimate,
p.value = cor.m$p.value,
soil = 'Grassland')
dist.stats.m
cor.a <- cor.test(combined.a$SpatialDistance, combined.a$BrayDistance, method = "pearson", alternative = "two.sided") %>% tidy()
lm.a <- lm(BrayDistance ~ SpatialDistance, data = combined.a) %>% tidy() %>% filter(term == "SpatialDistance")
dist.stats.a <- data.frame(r = cor.a$estimate,
slope = lm.a$estimate,
p.value = cor.a$p.value,
soil = 'Forest')
dist.stats.a
cor.b <- cor.test(combined.b$SpatialDistance, combined.b$BrayDistance, method = "pearson", alternative = "two.sided") %>% tidy()
lm.b <- lm(BrayDistance ~ SpatialDistance, data = combined.b) %>% tidy() %>% filter(term == "SpatialDistance")
dist.stats.b <- data.frame(r = cor.b$estimate,
slope = lm.b$estimate,
p.value = cor.b$p.value,
soil = 'Wetland')
dist.stats.b
combined.stats <- rbind(dist.stats.m, dist.stats.a, dist.stats.b)
#IEP function
add_pI_column <- function(df) {
# Apply the s2c function to convert values in Column2 to vectors
df$sequences <- sapply(df$seq_aa, s2c)
# Calculate isoelectric points using computePI
df$pI <- sapply(df$sequences, computePI)
return(df)
}
df <- read.table('2309.paladin.surfaceproteinsfinal.mean.tsv',sep = "\t", header=T) %>%
column_to_rownames(var='Contig') %>%
select(starts_with('ML')) %>%
filter(rowSums(. != 0) > 0) %>%
rownames_to_column(var='protein_id')
squn <- read_csv('2309_surfaceproteins_vcontactdatabase_AAsequences.csv')
df <- df  %>% left_join(squn, by ="protein_id")
df <- add_pI_column(df)
df <- df %>% column_to_rownames(var = 'protein_id')
df2 <- df %>% select(-seq_name,-seq_aa, -virus, -sequences, -protein_name) #select samples and pI
df2 <- df2 %>% mutate(across(-c(pI), ~ifelse(. > 0, pI, .))) %>% select (-pI) #add the pI to every sample that had that protein in it
df3 <- as.data.frame(t(df2)) %>% rownames_to_column(var = 'SampleID')
df.tidy <- df3 %>%  pivot_longer(cols = -SampleID, names_to = "ProteinID", values_to = "IEP") %>% filter(IEP>0)
df.tidy$pH <- substr(df.tidy$SampleID, 8, 8)
(plot1 <-  ggplot(df.tidy, aes(x=IEP, fill = pH)) + geom_density(alpha=0.7) + theme_linedraw() +
labs(x = 'Bioinformatically Calculated Isoelectric Point', y = 'Density') +
facet_wrap(~pH, ncol=1, labeller = labeller(pH = c("4" = "4.5","5" = "5.5", "6" = "6.5", "8" = "7.5"))) + xlim(2.5, 12.5) +
scale_fill_manual(values = c('goldenrod1','darkolivegreen3','chartreuse4', 'darkcyan'), labels = c("4.5", "5.5", "6.5", "7.5") ) +
theme( panel.grid.major = element_line(color = "gray80"),
panel.grid.minor = element_line(color = "gray80"), legend.position = 'bottom', legend.title = element_text(face = 'bold', size = 8), legend.text = element_text(size = 8), axis.title.x = element_text(face ="bold"),
axis.title.y = element_text(face = "bold")))
library(tidyverse)
library(cowplot)
#PCoA
library(vegan)
library(ape)
#PERMANOVA
library(pairwiseAdonis)
#venndiagram
library(ggvenn)
setwd('/Users/janefudyma/Documents/CA/UC_Davis/Emerson_Lab/21.stanford_SSRL/2303_combineddata')
#set color pallettes
set.buffer.chem <- c('azure4', '#F99B45', '#63AAC0', '#D95980')
set.buffer.chem.bioreps <- c('aliceblue','lavenderblush3', 'bisque')
set.pH.bioreps <- c('azure3','darkslategray', 'darksalmon')
#otu table
deta <- read.csv("2309_normalizedabundancetable_90percentreadidentity.csv", row.names = 1)
bio.otu <- deta %>% select(CB_BR1:SM_BR3) %>% filter(rowSums(across(where(is.numeric)))!=0)
tech.otu <- deta %>% select(CB_TR1:SM_TR4) %>% filter(rowSums(across(where(is.numeric)))!=0)
#metadata table
meta <- read.csv("230321_SampleMeta.csv")
bio.m <- meta[meta$Type == 'BR', ]
tech.m <- meta[meta$Type == 'TR', ]
otu <- t(tech.otu)
otu.xform <- decostand(otu, method="hellinger")
otu.dist.tech <- as.matrix(vegdist(otu.xform, method='bray'))
str(otu.dist.tech)
otu.nmds <- metaMDS(otu.dist.tech)
otu.nmds$stress
pcoa <- pcoa(as.dist(otu.dist.tech))
axes <- as.data.frame(pcoa$vectors)
eigval <- round(pcoa$values$Relative_eig * 100, digits = 2)
eigval <- data.frame( PC = 1:length(eigval), Eigval = eigval)
pco1.tech <- paste("PCo1 (", eigval[[1,2]], " %)", sep = "")
pco2.tech <- paste("PCo2 (", eigval[[2,2]], " %)", sep = "")
axes.tech <- cbind(axes,tech.m) #add meta data to axes table
#rarefied data
df <- read.table("202303_rarefied/230323_normalizedabundancetable_rarefied.csv", sep=",", header=T, row.names=1)
df <- df %>% mutate_if(is.numeric, ~1 * (. > 0))
#select votus that are present in every sample
df$CB <- with(df, ifelse(CB_TR1 == 1 & CB_TR2 == 1 & CB_TR3 == 1 & CB_TR4 == 1, 1, 0))
df$GL <- with(df, ifelse(GL_TR1 == 1 & GL_TR2 == 1 & GL_TR3 == 1 & GL_TR4 == 1, 1, 0))
df$PB <- with(df, ifelse(PB_TR1 == 1 & PB_TR2 == 1 & PB_TR3 == 1 & PB_TR4 == 1, 1, 0))
df$SM <- with(df, ifelse(SM_TR1 == 1 & SM_TR2 == 1 & SM_TR3 == 1 & SM_TR4 == 1, 1, 0))
df1 <- df %>% select(CB:SM)
df1$CB[df1$CB > 0] <- (rownames(df1)[df1$CB > 0])
df1$GL[df1$GL > 0] <- (rownames(df1)[df1$GL > 0])
df1$PB[df1$PB > 0] <- (rownames(df1)[df1$PB > 0])
df1$SM[df1$SM > 0] <- (rownames(df1)[df1$SM > 0])
listformat <- list(CB=df1$CB,
GL=df1$GL,
PB=df1$PB,
SM=df1$SM
)
#legend_grob <- get_legend(pcoa.tech)
(vent <- ggvenn(listformat, fill_color = set.buffer.chem, stroke_size = 0.5, text_size = 4.5, set_name_size = 0, show_percentage = FALSE ))
otu <- t(bio.otu)
otu.xform <- decostand(otu, method="hellinger")
otu.dist.bio <- as.matrix(vegdist(otu.xform, method='bray'))
str(otu.dist.bio)
otu.nmds <- metaMDS(otu.dist.bio)
otu.nmds$stress
pcoa <- pcoa(as.dist(otu.dist.bio))
axes <- as.data.frame(pcoa$vectors)
axes
eigval <- round(pcoa$values$Relative_eig * 100, digits = 2)
eigval <- data.frame( PC = 1:length(eigval), Eigval = eigval)
eigval[[1,2]] # see first axes percentage
eigval[[2,2]] # second axes
eigval[[3,2]] # third axes
eigval[[4,2]] # fourth axes
#define the axes for the plot - adjust if plotting dimensions other than 1 and 2
pco1.bio <- paste("PCo1 (", eigval[[1,2]], " %)", sep = "")
pco2.bio <- paste("PCo2 (", eigval[[2,2]], " %)", sep = "")
pco3.bio <- paste("PCo3 (", eigval[[3,2]], " %)", sep = "")
#looked to see that axes and sampleID orders matched visually
axes.bio <- cbind(axes,bio.m)
#rarefied data
df <- read.table("202303_rarefied/230323_normalizedabundancetable_rarefied.csv", sep=",", header=T, row.names=1)
df <- df %>% mutate_if(is.numeric, ~1 * (. > 0))
#select votus that are present in every sample
df$CB <- with(df, ifelse(CB_BR1 == 1 & CB_BR2 == 1 & CB_BR3 == 1, 1, 0))
df$GL <- with(df, ifelse(GL_BR1 == 1 & GL_BR2 == 1 & GL_BR3 == 1, 1, 0 ))
df$PB <- with(df, ifelse(PB_BR1 == 1 & PB_BR2 == 1 & PB_BR3 == 1, 1, 0 ))
df$SM <- with(df, ifelse(SM_BR1 == 1 & SM_BR2 == 1 & SM_BR3 == 1, 1, 0 ))
df1 <- df %>% select(CB:SM)
df1$CB[df1$CB > 0] <- (rownames(df1)[df1$CB > 0])
df1$GL[df1$GL > 0] <- (rownames(df1)[df1$GL > 0])
df1$PB[df1$PB > 0] <- (rownames(df1)[df1$PB > 0])
df1$SM[df1$SM > 0] <- (rownames(df1)[df1$SM > 0])
listformat <- list(CB=df1$CB,
GL=df1$GL,
PB=df1$PB,
SM=df1$SM
)
#legend_grob <- get_legend(pcoa.tech)
(vent2 <- ggvenn(listformat, fill_color = set.buffer.chem, stroke_size = 0.5, text_size = 4.5, set_name_size = 0, show_percentage = FALSE ))
#select votus that are present in every sample
df$BR1 <- with(df, ifelse(CB_BR1 == 1 & GL_BR1 == 1 & PB_BR1 == 1 & SM_BR1 == 1, 1, 0))
df$BR2 <- with(df, ifelse(CB_BR2 == 1 & GL_BR2 == 1 & PB_BR2 == 1 & SM_BR2 == 1, 1, 0))
df$BR3 <- with(df, ifelse(CB_BR3 == 1 & GL_BR3 == 1 & PB_BR3 == 1 & SM_BR3 == 1, 1, 0))
df1 <- df %>% select(BR1:BR3)
df1$BR1[df1$BR1 > 0] <- (rownames(df1)[df1$BR1 > 0])
df1$BR2[df1$BR2 > 0] <- (rownames(df1)[df1$BR2 > 0])
df1$BR3[df1$BR3 > 0] <- (rownames(df1)[df1$BR3 > 0])
listformat <- list(BR1=df1$BR1,
BR2=df1$BR2,
BR3=df1$BR3
)
(vent3 <- ggvenn(listformat, fill_color = set.buffer.chem.bioreps, stroke_size = 0.5, text_size = 4.5, set_name_size = 0, show_percentage = FALSE ))
df.bio <- read.csv('../../21.pH/220415_pHdataall/2309_normalizedabundancetable_pHbioreps_rarefied_90readidentity.csv')  %>% column_to_rownames(var='X')
df.bio <-  df.bio %>% mutate_if(is.numeric, ~ ifelse(. > 0, 1, 0))
df.bio$bb.br1 <- with(df.bio, ifelse(BB_BR1_4 == 1 & BB_BR1_5 == 1 & BB_BR1_6 == 1 & BB_BR1_8 == 1, 1, 0))
df.bio$bb.br2 <- with(df.bio, ifelse(BB_BR2_4 == 1 & BB_BR2_5 == 1 & BB_BR2_6 == 1 & BB_BR2_8 == 1, 1, 0))
df.bio$bb.br3 <- with(df.bio, ifelse(BB_BR3_4 == 1 & BB_BR3_5 == 1 & BB_BR3_6 == 1 & BB_BR3_8 == 1, 1, 0))
df.bod <- df.bio %>% select(bb.br1:bb.br3)
df.bod$bb.br1[df.bod$bb.br1 > 0] <- (rownames(df.bod)[df.bod$bb.br1 > 0])
df.bod$bb.br2[df.bod$bb.br2 > 0] <- (rownames(df.bod)[df.bod$bb.br2 > 0])
df.bod$bb.br3[df.bod$bb.br3 > 0] <- (rownames(df.bod)[df.bod$bb.br3 > 0])
list.bod <- list(BR1=df.bod$bb.br1, BR2=df.bod$bb.br2, BR3=df.bod$bb.br3)
(vent.bod.bioreps <- ggvenn(list.bod, fill_color = set.pH.bioreps, stroke_size = 0.5, text_size = 4.5, set_name_size = 0, show_percentage = FALSE ) + theme(plot.title = element_text(hjust = 0.5)))
df.bio <- read.csv('../../21.pH/220415_pHdataall/2309_normalizedabundancetable_pHbioreps_rarefied_90readidentity.csv')  %>% column_to_rownames(var='X')
df.bio <-  df.bio %>% mutate_if(is.numeric, ~ ifelse(. > 0, 1, 0))
df.bio$bb.br1 <- with(df.bio, ifelse(BB_BR1_4 == 1 & BB_BR1_5 == 1 & BB_BR1_6 == 1 & BB_BR1_8 == 1, 1, 0))
df.bio$bb.br2 <- with(df.bio, ifelse(BB_BR2_4 == 1 & BB_BR2_5 == 1 & BB_BR2_6 == 1 & BB_BR2_8 == 1, 1, 0))
df.bio$bb.br3 <- with(df.bio, ifelse(BB_BR3_4 == 1 & BB_BR3_5 == 1 & BB_BR3_6 == 1 & BB_BR3_8 == 1, 1, 0))
df.bod <- df.bio %>% select(bb.br1:bb.br3)
df.bod$bb.br1[df.bod$bb.br1 > 0] <- (rownames(df.bod)[df.bod$bb.br1 > 0])
df.bod$bb.br2[df.bod$bb.br2 > 0] <- (rownames(df.bod)[df.bod$bb.br2 > 0])
df.bod$bb.br3[df.bod$bb.br3 > 0] <- (rownames(df.bod)[df.bod$bb.br3 > 0])
list.bod <- list(BR1=df.bod$bb.br1, BR2=df.bod$bb.br2, BR3=df.bod$bb.br3)
(vent.bod.bioreps <- ggvenn(list.bod, fill_color = set.pH.bioreps, stroke_size = 0.5, text_size = 4.5, set_name_size = 0, show_percentage = FALSE ) + theme(plot.title = element_text(hjust = 0.5)))
pcoa.tech <-  ggplot(mapping = aes(x, y)) +
geom_point(data=axes.tech, aes(x=Axis.1, y=Axis.2, fill=Buffer), colour = 'black', pch=21,
size=6,
show.legend = TRUE) +
labs(title = '',x= pco1.tech, y=pco2.tech) + theme_minimal() +
scale_fill_manual(values=set.buffer.chem, name = 'Buffer         ') +
#scale_shape_discrete(labels=c("4.5","5.5", "6.5", "7.5")) +
theme_linedraw(base_size = 16) +
facet_wrap(~Type, labeller = labeller(Type = c("TR" = "Technical Replicates"))) +
theme( legend.text = element_text(size =10), legend.title = element_text(size=10, face = 'bold'),
axis.title.x = element_text(size=10, face = 'bold'), axis.title.y = element_text(size=10, face = 'bold'),
plot.title = element_text(size=10), legend.position = 'right',
legend.box="vertical", panel.grid.major = element_line(color = "gray70"),
panel.grid.minor = element_line(color = "gray70"))
pcoa.tech
pcoa.bio <-  ggplot(mapping = aes(x, y)) +
geom_point(data=axes.bio, aes(x=Axis.1, y=Axis.2, fill=Rep), colour = 'black', pch=21,
size=6,
show.legend = TRUE) +
labs(title = '', x= pco1.bio, y=pco2.bio) + theme_minimal() +
scale_fill_manual(values=c(set.buffer.chem.bioreps), name = 'Rep (Chem)') + #slateblue
#scale_shape_discrete(labels=c("4.5","5.5", "6.5", "7.5")) +
theme_linedraw(base_size = 16) +
facet_wrap(~Type, labeller = labeller(Type = c("BR" = "Biological Replicates"))) +
theme( legend.text = element_text(size =10), legend.title = element_text(size=10, face = 'bold'),
axis.title.x = element_text(size=10, face = 'bold'), axis.title.y = element_text(size=10, face = 'bold'),
plot.title = element_text(size=10), legend.position = 'right',
legend.box="vertical", panel.grid.major = element_line(color = "gray70"),
panel.grid.minor = element_line(color = "gray70"))
pcoa.bio
#ggsave('PCoA_BioReps_Axis1-2.png', pcoa.bio, dpi = 300, width = 6, height =5)
pcoa.bio.2 <-  ggplot(mapping = aes(x, y)) +
geom_point(data=axes.bio, aes(x=Axis.2, y=Axis.3,fill=Buffer), colour = 'black', pch=21,
size=6,
show.legend = TRUE) +
labs(title = '', x= pco2.bio, y=pco3.bio) + theme_minimal() +
scale_fill_manual(values=c(set.buffer.chem)) + #values=met.brewer("Hokusai3", 6)
scale_shape_discrete(name = 'Biological Replicate') +
#scale_shape_discrete(labels=c("4.5","5.5", "6.5", "7.5")) +
facet_wrap(~Type, labeller = labeller(Type = c("BR" = "Biological Replicates"))) +
theme_linedraw(base_size = 16) +
theme( legend.text = element_text(size =10), legend.title = element_text(size=10, face = 'bold'),
axis.title.x = element_text(size=10, face = 'bold'), axis.title.y = element_text(size=10, face = 'bold'),
plot.title = element_text(size=10), legend.position = 'right',
legend.box="vertical", panel.grid.major = element_line(color = "gray70"),
panel.grid.minor = element_line(color = "gray70"))
pcoa.bio.2
forlegend <-  ggplot(mapping = aes(x, y)) +
geom_point(data=axes.bio, aes(x=Axis.1, y=Axis.2, fill=Rep), colour = 'black', pch=21,
size=6,
show.legend = TRUE) +
scale_fill_manual(values=c(set.pH.bioreps), name = 'Rep (pH)    ') + theme_minimal() + theme( legend.text = element_text(size =10), legend.title = element_text(size=10, face = 'bold'))
forlegend
legend1 <- get_legend(pcoa.tech)
legend2 <- get_legend(pcoa.bio)
legend3 <- get_legend(forlegend)
(legends <- plot_grid(legend1, NULL, legend2, NULL, legend3, ncol=1, rel_heights = c(1, -0.65, 1, -0.67, 1)))
p1 <- pcoa.tech + theme(legend.position = "none")
p2 <- pcoa.bio + theme(legend.position = "none")
p4 <- pcoa.bio.2  + theme(legend.position = "none")
(top <- plot_grid(p1, p2, p4, labels = c("A", "B", "C"), label_size = 18, ncol = 3))
(bot <- plot_grid(NULL,vent, vent3, vent.bod.bioreps, labels = c("","D", "E", "F"), rel_widths = c(0.3, 1,1,1), label_size = 18, nrow = 1))
(all <- plot_grid(top, bot, ncol=1, rel_heights = c(2.5, 1.75)))
(all7 <- plot_grid(all, NULL, legends, NULL, nrow = 1, rel_widths = c(2, -.2, .6, -.2)) + theme(
plot.background = element_rect(fill = "white", color = 'white')))
setwd('/Users/janefudyma/Documents/CA/UC_Davis/Emerson_Lab/21.pH/scripts_final')
df.bio <- read.csv('../data/2309_allpH_90percentreadidentity_normalized.csv')  %>% column_to_rownames(var='X')
df.bio
df.bio <- read.csv('../data/2309_allpH_90percentreadidentity_normalized.csv')  %>% column_to_rownames(var='X') %>% select(AN_BR1_4:ML_BR3_8)
df.bio <-  df.bio %>% mutate_if(is.numeric, ~ ifelse(. > 0, 1, 0))
df.bio$bb.br1 <- with(df.bio, ifelse(BB_BR1_4 == 1 & BB_BR1_5 == 1 & BB_BR1_6 == 1 & BB_BR1_8 == 1, 1, 0))
df.bio$bb.br2 <- with(df.bio, ifelse(BB_BR2_4 == 1 & BB_BR2_5 == 1 & BB_BR2_6 == 1 & BB_BR2_8 == 1, 1, 0))
df.bio$bb.br3 <- with(df.bio, ifelse(BB_BR3_4 == 1 & BB_BR3_5 == 1 & BB_BR3_6 == 1 & BB_BR3_8 == 1, 1, 0))
df.bod <- df.bio %>% select(bb.br1:bb.br3)
df.bod$bb.br1[df.bod$bb.br1 > 0] <- (rownames(df.bod)[df.bod$bb.br1 > 0])
df.bod$bb.br2[df.bod$bb.br2 > 0] <- (rownames(df.bod)[df.bod$bb.br2 > 0])
df.bod$bb.br3[df.bod$bb.br3 > 0] <- (rownames(df.bod)[df.bod$bb.br3 > 0])
list.bod <- list(BR1=df.bod$bb.br1, BR2=df.bod$bb.br2, BR3=df.bod$bb.br3)
(vent.bod.bioreps <- ggvenn(list.bod, fill_color = set.pH.bioreps, stroke_size = 0.5, text_size = 4.5, set_name_size = 0, show_percentage = FALSE ) + theme(plot.title = element_text(hjust = 0.5)))
df.bio <- read.csv('../data/2309_normalizedabundancetable_pHbioreps_rarefied_90readidentity')  %>% column_to_rownames(var='X')
df.bio <- read.csv('../data/2309_normalizedabundancetable_pHbioreps_rarefied_90readidentity.csv')  %>% column_to_rownames(var='X')
df.bio <-  df.bio %>% mutate_if(is.numeric, ~ ifelse(. > 0, 1, 0))
df.bio$bb.br1 <- with(df.bio, ifelse(BB_BR1_4 == 1 & BB_BR1_5 == 1 & BB_BR1_6 == 1 & BB_BR1_8 == 1, 1, 0))
df.bio$bb.br2 <- with(df.bio, ifelse(BB_BR2_4 == 1 & BB_BR2_5 == 1 & BB_BR2_6 == 1 & BB_BR2_8 == 1, 1, 0))
df.bio$bb.br3 <- with(df.bio, ifelse(BB_BR3_4 == 1 & BB_BR3_5 == 1 & BB_BR3_6 == 1 & BB_BR3_8 == 1, 1, 0))
df.bod <- df.bio %>% select(bb.br1:bb.br3)
df.bod$bb.br1[df.bod$bb.br1 > 0] <- (rownames(df.bod)[df.bod$bb.br1 > 0])
df.bod$bb.br2[df.bod$bb.br2 > 0] <- (rownames(df.bod)[df.bod$bb.br2 > 0])
df.bod$bb.br3[df.bod$bb.br3 > 0] <- (rownames(df.bod)[df.bod$bb.br3 > 0])
list.bod <- list(BR1=df.bod$bb.br1, BR2=df.bod$bb.br2, BR3=df.bod$bb.br3)
(vent.bod.bioreps <- ggvenn(list.bod, fill_color = set.pH.bioreps, stroke_size = 0.5, text_size = 4.5, set_name_size = 0, show_percentage = FALSE ) + theme(plot.title = element_text(hjust = 0.5)))
df.bio <- read.csv('../data/2309_allpH_90percentreadidentity_normalized.csv')  %>% column_to_rownames(var='X') %>% select(AN_BR1_4:ML_BR3_8)
df.bio <- read.csv('../../21.pH/220415_pHdataall/2309_allpH_90percentreadidentity_normalized.csv')  %>% column_to_rownames(var='X') %>% select(AN_BR1_4:ML_BR3_8)
df.bio <-  df.bio %>% mutate_if(is.numeric, ~ ifelse(. > 0, 1, 0))
df.bio$bb.br1 <- with(df.bio, ifelse(BB_BR1_4 == 1 & BB_BR1_5 == 1 & BB_BR1_6 == 1 & BB_BR1_8 == 1, 1, 0))
df.bio$bb.br2 <- with(df.bio, ifelse(BB_BR2_4 == 1 & BB_BR2_5 == 1 & BB_BR2_6 == 1 & BB_BR2_8 == 1, 1, 0))
df.bio$bb.br3 <- with(df.bio, ifelse(BB_BR3_4 == 1 & BB_BR3_5 == 1 & BB_BR3_6 == 1 & BB_BR3_8 == 1, 1, 0))
df.bod <- df.bio %>% select(bb.br1:bb.br3)
df.bod$bb.br1[df.bod$bb.br1 > 0] <- (rownames(df.bod)[df.bod$bb.br1 > 0])
df.bod$bb.br2[df.bod$bb.br2 > 0] <- (rownames(df.bod)[df.bod$bb.br2 > 0])
df.bod$bb.br3[df.bod$bb.br3 > 0] <- (rownames(df.bod)[df.bod$bb.br3 > 0])
list.bod <- list(BR1=df.bod$bb.br1, BR2=df.bod$bb.br2, BR3=df.bod$bb.br3)
(vent.bod.bioreps <- ggvenn(list.bod, fill_color = set.pH.bioreps, stroke_size = 0.5, text_size = 4.5, set_name_size = 0, show_percentage = FALSE ) + theme(plot.title = element_text(hjust = 0.5)))
legend1 <- get_legend(pcoa.tech)
legend2 <- get_legend(pcoa.bio)
legend3 <- get_legend(forlegend)
(legends <- plot_grid(legend1, NULL, legend2, NULL, legend3, ncol=1, rel_heights = c(1, -0.65, 1, -0.67, 1)))
p1 <- pcoa.tech + theme(legend.position = "none")
p2 <- pcoa.bio + theme(legend.position = "none")
p4 <- pcoa.bio.2  + theme(legend.position = "none")
(top <- plot_grid(p1, p2, p4, labels = c("A", "B", "C"), label_size = 18, ncol = 3))
(bot <- plot_grid(NULL,vent, vent3, vent.bod.bioreps, labels = c("","D", "E", "F"), rel_widths = c(0.3, 1,1,1), label_size = 18, nrow = 1))
(all <- plot_grid(top, bot, ncol=1, rel_heights = c(2.5, 1.75)))
(all7 <- plot_grid(all, NULL, legends, NULL, nrow = 1, rel_widths = c(2, -.2, .6, -.2)) + theme(
plot.background = element_rect(fill = "white", color = 'white')))
ggsave('Fig4_BuffChem_BioRepVennComparison.png', all7, dpi = 300, height = 7, width = 10)
library(heatmaply)
library(pheatmap)
library(ggplotify)
